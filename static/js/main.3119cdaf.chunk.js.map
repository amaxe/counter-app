{"version":3,"sources":["components/counter5/Button.tsx","components/counter5/Display.tsx","components/counter5/Settings.tsx","redux/counter5-reducer.ts","components/counter5/Counter.tsx","App.tsx","reportWebVitals.ts","redux/counter4-reducer.ts","redux/store.ts","utils/localStorage.ts","index.tsx","components/counter5/counter.module.css"],"names":["Button","props","disabled","isDisabled","onClick","name","Display","startValue","style","maxValue","s","className","display","Settings","inputWarnings","tempStartValue","tempMaxValue","settingsInput","input","type","onChange","e","changeStartValue","currentTarget","valueAsNumber","value","changeMaxValue","initialState","Counter","useSelector","state","counter5","useState","setTempStartValue","setTempMaxValue","editMode","setEditMode","dispatch","useDispatch","incBtnDisable","resetBtnDisable","setBtnDisable","app","setDisplay","buttons","setMaxValueAC","mainDisplay","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","reducers","combineReducers","counter4","action","Number","persistedState","serializedState","localStorage","getItem","JSON","parse","err","loadState","store","createStore","subscribe","stringify","setItem","saveState","getState","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.3119cdaf.chunk.js","sourcesContent":["type PropsType = {\r\n    name: string\r\n    onClick: () => void\r\n    isDisabled?: boolean\r\n}\r\n\r\nexport function Button(props: PropsType) {\r\n    return (\r\n        <span >\r\n            <button disabled={props.isDisabled} onClick={props.onClick}> {props.name} </button>\r\n        </span>\r\n    )\r\n}","import React from \"react\"\r\nimport s from './counter.module.css'\r\n\r\ntype PropsType = {\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Display: React.FC<PropsType> = ({startValue, maxValue}) => {\r\n    let style = \"\"\r\n    startValue === maxValue && (style = s.maxValue)\r\n\r\n    return (\r\n        <div className={s.display}>\r\n            <div className={style}>{startValue}</div>\r\n        </div>\r\n    )\r\n}","import {ChangeEvent} from \"react\"\r\nimport s from './counter.module.css'\r\n\r\ntype PropsType = {\r\n    tempStartValue: number\r\n    tempMaxValue: number\r\n    changeStartValue: (value: number) => void\r\n    changeMaxValue: (value: number) => void\r\n}\r\n\r\nexport function Settings(props: PropsType) {\r\n\r\n    const startValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStartValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    const maxValueHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(e.currentTarget.valueAsNumber)\r\n    }\r\n\r\n    let inputWarnings = props.tempStartValue >= props.tempMaxValue\r\n        || props.tempStartValue < 0\r\n        || props.tempMaxValue < 0\r\n\r\n    return (\r\n        <div className={s.settingsInput}>\r\n            <div>\r\n                <span>start value: </span>\r\n                <input\r\n                    className={inputWarnings ? s.input : \"\"}\r\n                    name=\"startValue\"\r\n                    type=\"number\"\r\n                    onChange={startValueHandler}\r\n                    value={props.tempStartValue}\r\n                />\r\n            </div>\r\n\r\n            <div>\r\n                <span>max value: </span>\r\n                <input\r\n                    className={inputWarnings ? s.input : \"\"}\r\n                    name=\"maxValue\"\r\n                    type=\"number\"\r\n                    onChange={maxValueHandler}\r\n                    value={props.tempMaxValue}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","export type IncrementActionType = {\r\n    type: 'INCREMENT'\r\n}\r\n\r\nexport type ResetActionType = {\r\n    type: 'RESET'\r\n    value: number\r\n}\r\n\r\nexport type SetStartValueActionType = {\r\n    type: \"SET-START-VALUE\"\r\n    value: number\r\n}\r\n\r\nexport type SetMaxValueActionType = {\r\n    type: \"SET-MAX-VALUE\"\r\n    value: number\r\n}\r\n\r\nexport type ActionTypes = IncrementActionType | ResetActionType\r\n    | SetStartValueActionType | SetMaxValueActionType\r\n\r\n\r\nexport type InitialStateType = {\r\n    startValue: number\r\n    maxValue: number\r\n}\r\n\r\nconst initialState = {\r\n    startValue: 0,\r\n    maxValue: 1\r\n}\r\n\r\nexport const counter5Reducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {...state, startValue: state.startValue + 1}\r\n\r\n        case 'RESET':\r\n            return {...state, startValue: action.value}\r\n\r\n        case 'SET-START-VALUE':\r\n            return {...state, startValue: action.value}\r\n\r\n        case 'SET-MAX-VALUE':\r\n            return {...state, maxValue: action.value}\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incrementAC = () => ({type: 'INCREMENT'})\r\n\r\nexport const resetAC = (value: number) => ({type: 'RESET', value})\r\n\r\nexport const setStartValueAC = (value: number) => ({type: \"SET-START-VALUE\", value})\r\n\r\nexport const setMaxValueAC = (value: number) => ({type: \"SET-MAX-VALUE\", value})\r\n","import React, {useState} from 'react'\r\nimport {Button} from './Button'\r\nimport {Display} from './Display'\r\nimport s from './counter.module.css'\r\nimport {Settings} from './Settings'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {incrementAC, resetAC, setMaxValueAC, setStartValueAC} from \"../../redux/counter5-reducer\";\r\n\r\nfunction Counter() {\r\n\r\n    const startValue = useSelector<AppRootStateType, number>(state => state.counter5.startValue)\r\n    const maxValue = useSelector<AppRootStateType, number>(state => state.counter5.maxValue)\r\n\r\n    // temporary start/max values from inputs' fields\r\n    const [tempStartValue, setTempStartValue] = useState<number>(startValue)\r\n    const [tempMaxValue, setTempMaxValue] = useState<number>(maxValue)\r\n\r\n    //switch to 'Settings' menu\r\n    const [editMode, setEditMode] = useState<boolean>(false)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onIncHandler = () => dispatch(incrementAC())\r\n    const onResetHandler = () => dispatch(resetAC(tempStartValue))\r\n\r\n    // buttons disable conditions\r\n    let incBtnDisable = startValue === maxValue\r\n    let resetBtnDisable = startValue === tempStartValue\r\n    let setBtnDisable = tempStartValue >= tempMaxValue || tempStartValue < 0 || tempMaxValue < 0\r\n\r\n    const changeStartValue = (value: number) => setTempStartValue(value)\r\n    const changeMaxValue = (value: number) => setTempMaxValue(value)\r\n\r\n    const onSetHandler = () => {\r\n        dispatch(setStartValueAC(tempStartValue))\r\n        dispatch(setMaxValueAC(tempMaxValue))\r\n        setEditMode(false)\r\n    }\r\n\r\n    let editModeHandler = () => setEditMode(true)\r\n\r\n    return (\r\n        <div className={s.app}>\r\n            {editMode\r\n                ? <div className={s.setDisplay}>\r\n                    <Settings\r\n                        changeStartValue={changeStartValue}\r\n                        changeMaxValue={changeMaxValue}\r\n                        tempStartValue={tempStartValue}\r\n                        tempMaxValue={tempMaxValue}\r\n                    />\r\n                    <div className={s.buttons}>\r\n                        <Button\r\n                            name=\"set\"\r\n                            onClick={onSetHandler}\r\n                            isDisabled={setBtnDisable}\r\n                        />\r\n                    </div>\r\n                </div>\r\n                : <div className={s.mainDisplay}>\r\n                    <Display\r\n                        startValue={startValue}\r\n                        maxValue={maxValue}\r\n                    />\r\n                    <div className={s.buttons}>\r\n                        <Button\r\n                            name=\"inc\"\r\n                            onClick={onIncHandler}\r\n                            isDisabled={incBtnDisable}\r\n                        />\r\n                        <Button\r\n                            name=\"reset\"\r\n                            onClick={onResetHandler}\r\n                            isDisabled={resetBtnDisable}\r\n                        />\r\n                        <Button\r\n                            name=\"set\"\r\n                            onClick={editModeHandler}\r\n                        />\r\n                    </div>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Counter","import React from 'react'\nimport Counter1 from './components/counter1/Counter'\nimport Counter2 from './components/counter2/Counter'\nimport Counter3 from './components/counter3/Counter'\nimport Counter4 from './components/counter4/CounterContainer'\nimport Counter5 from \"./components/counter5/Counter\";\n\nfunction App() {\n    return (\n        <div>\n            {/*<Counter1 />*/}\n            {/*<Counter2/>*/}\n            {/*<Counter3/>*/}\n\n            {/*Redux, HOC*/}\n            {/*<Counter4 />*/}\n\n            {/*Redux, useSelector, useDispatch*/}\n            <Counter5 />\n\n        </div>\n    )\n}\n\nexport default App","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","export type IncrementActionType = {\r\n    type: 'INCREMENT'\r\n}\r\n\r\nexport type ResetActionType = {\r\n    type: 'RESET'\r\n    value: number | string\r\n}\r\n\r\nexport type SetStartValueActionType = {\r\n    type: 'SET-START-VALUE'\r\n    value: number | string\r\n}\r\n\r\nexport type SetMaxValueActionType = {\r\n    type: 'SET-MAX-VALUE'\r\n    value: number\r\n}\r\n\r\nexport type ActionTypes = IncrementActionType | ResetActionType | SetStartValueActionType | SetMaxValueActionType\r\n\r\nexport type InitialStateType = {\r\n    startValue: number | string\r\n    maxValue: number\r\n}\r\n\r\nconst initialState = {\r\n    startValue: 0,\r\n    maxValue: 1\r\n}\r\n\r\nexport const counter4Reducer = (state: InitialStateType = initialState, action: ActionTypes): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'INCREMENT':\r\n            return {\r\n                ...state, startValue: Number(state.startValue) + 1\r\n            }\r\n        case 'RESET':\r\n            return {\r\n                ...state, startValue: action.value\r\n            }\r\n        case 'SET-START-VALUE':\r\n            return {\r\n                ...state,\r\n                startValue: action.value\r\n            }\r\n\r\n        case 'SET-MAX-VALUE':\r\n            return {\r\n                ...state,\r\n                maxValue: action.value\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const incrementAC = (): IncrementActionType => {\r\n    return {type: 'INCREMENT'}\r\n}\r\n\r\nexport const resetAC = (value: number | string): ResetActionType => {\r\n    return {type: 'RESET', value}\r\n}\r\n\r\nexport const setStartValueAC = (value: number | string): SetStartValueActionType => {\r\n    return {type: \"SET-START-VALUE\", value}\r\n}\r\n\r\nexport const setMaxValueAC = (value: number): SetMaxValueActionType => {\r\n    return {type: \"SET-MAX-VALUE\", value}\r\n}","import {combineReducers, createStore} from \"redux\"\r\nimport {loadState, saveState} from \"../utils/localStorage\"\r\nimport {counter4Reducer} from \"./counter4-reducer\"\r\nimport {counter5Reducer} from \"./counter5-reducer\"\r\n\r\nconst reducers = combineReducers({\r\n    counter4: counter4Reducer,\r\n    counter5: counter5Reducer\r\n})\r\n\r\nconst persistedState = loadState()\r\nexport let store = createStore(reducers, persistedState)\r\n\r\nstore.subscribe(() => {\r\n    saveState({\r\n        counter4: store.getState().counter4,\r\n        counter5: store.getState().counter5\r\n    })\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof reducers>","import {AppRootStateType} from \"../redux/store\"\r\n\r\nexport const loadState = () => {\r\n    try {\r\n        const serializedState = localStorage.getItem('state')\r\n        if (serializedState === null) {\r\n            return undefined\r\n        }\r\n        return JSON.parse(serializedState)\r\n\r\n    } catch (err) {\r\n        return undefined\r\n    }\r\n}\r\n\r\nexport const saveState = (state: AppRootStateType) => {\r\n    try {\r\n        const serializedState = JSON.stringify(state)\r\n        localStorage.setItem('state', serializedState)\r\n    } catch {\r\n        // ignore write errors\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {BrowserRouter} from \"react-router-dom\";\nimport {Provider} from \"react-redux\";\nimport {store} from \"./redux/store\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <BrowserRouter>\n            <Provider store={store}>\n                <App/>\n            </Provider>\n        </BrowserRouter>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"counter_app__2iEnp\",\"mainDisplay\":\"counter_mainDisplay__tCcIb\",\"setDisplay\":\"counter_setDisplay__26uWg\",\"buttons\":\"counter_buttons__2UyL-\",\"settingsInput\":\"counter_settingsInput__2Fvwi\",\"display\":\"counter_display__1ekqq\",\"maxValue\":\"counter_maxValue__2YTCA\",\"displayNormalMessage\":\"counter_displayNormalMessage__2JjjS\",\"displayWarningMessage\":\"counter_displayWarningMessage__JHVEv\",\"input\":\"counter_input__3wSbb\"};"],"sourceRoot":""}